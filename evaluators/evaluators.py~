"""m = 
"""


#[
from __future__ import annotations

import enum as en_
import numpy as np_
import scipy as sp_
import copy as co_
from typing import (Self, NoReturn, Callable, )
from collections.abc import (Iterable, )

from . import (equations as eq_, quantities as qu_, )
from .aldi import (adaptations as aa_, )
from .jacobians import (descriptors as jd_, )
#]


__all__ = [
    "SteadyEvaluator", "PlainEvaluator"
]


class _EvaluatorMixin:
    """
    """
    #[
    @property
    def equations_human(self, /, ) -> Iterable[str]:
        return [ eqn.human for eqn in self._equations ]

    @property
    def num_equations(self, /, ) -> int:
        """
        """
        return len(self._equations)

    def _create_evaluator_function(
        self,
        /,
        function_context: dict | None = None,
    ) -> NoReturn:
        """
        """
        function_context = aa_.add_function_adaptations_to_custom_functions(function_context)
        function_context["_array"] = np_.array
        self._xtrings = [ eqn.remove_equation_ref_from_xtring() for eqn in self._equations ]
        func_string = " , ".join(self._xtrings)
        self._func = eval(eq_.EVALUATOR_PREAMBLE + f"_array([{func_string}], dtype=float)", function_context)

    def _populate_min_max_shifts(self) -> NoReturn:
        """
        """
        self.min_shift = eq_.get_min_shift_from_equations(self._equations)
        self.max_shift = eq_.get_max_shift_from_equations(self._equations)
    #]


class SteadyEvaluator(_EvaluatorMixin):
    """
    """
    #[
    __slots__ = (
        "_t_zero", "_equations", "_quantities", "_eids", "_xtrings", "_func",
        "_incidence_matrix", "_x", "_z0", "_steady_array_updater",
        "_jacobian_descriptor",
        "_x_store",
    )
    @property
    def is_jacobian_sparse(self, /, ) -> bool:
        """
        True if Jacobian is sparse, False otherwise
        """
        return (
            self._jacobian_descriptor.is_sparse
            if self._jacobian_descriptor else False
        )

    def __init__(
        self,
        equations: eq_.Equations,
        quantities: qu_.Quantities,
        t_zero: int, 
        steady_array: np_.ndarray,
        z0: np_.ndarray,
        updater: Callable,
        jacobian_descriptor: Callable | None,
        function_context: dir | None,
        /,
        print_iter: bool = True,
    ) -> NoReturn:
        """ """
        self._t_zero = t_zero
        self._equations = list(equations)
        self._quantities = list(quantities)
        self._eids = list(eq_.generate_all_eids(self._equations))
        self._create_evaluator_function(function_context)
        self._create_incidence_matrix()
        self._x = steady_array
        self._z0 = z0.reshape(-1,) if z0 is not None else None
        self._steady_array_updater = updater
        self._jacobian_descriptor = jacobian_descriptor
        self._populate_min_max_shifts()
        self._iterations_printer = _IterationsPrinter(equations=self._equations, ) if print_iter else None
        self._x_store = []

    @property
    def initial_guess(self, /, ) -> np_.ndarray:
        return np_.copy(self._z0)

    @property
    def steady_array(self, /, ) -> np_.ndarray:
        return np_.copy(self._x)

    @property
    def quantities_human(self, /, ) -> Iterable[str]:
        return [ qty.human for qty in self._quantities ]

    @property
    def num_equations(self, /, ) -> int:
        return len(self._equations, )

    @property
    def num_quantities(self, /, ) -> int:
        return len(self._quantities, )

    def update(
        self,
        current: np_.ndarray | None = None,
        /,
    ) -> np_.ndarray:
        """
        """
        current = current if current is not None else self._z0.reshape(-1, 1, )
        return self._steady_array_updater(self._x, current, )

    def eval(
        self,
        current: np_.ndarray | None = None,
        /,
    ) -> np_.ndarray:
        """
        """
        #current = current[:-1] if current is not None else self._z0.reshape(-1, 1, )
        current = current if current is not None else self._z0.reshape(-1, 1, )
        self._steady_array_updater(self._x, current, )
        f = self._func(self._x, self._t_zero, None, )
        j_done = False
        if self._iterations_printer:
            self._iterations_printer.next(current, f, j_done, )
        return f

    def eval_sum_of_squares(
        self,
        /,
        *args,
    ) -> tuple[float, np_.ndarray]:
        """
        """
        f, j = self.eval_with_jacobian(*args)
        sum_of_squares = np_.sum(f ** 2)
        j_sum_of_squares = 2 * f.reshape(-1, 1) * j
        j_sum_of_squares = np_.sum(j_sum_of_squares, axis=0)
        return sum_of_squares, j_sum_of_squares

    def eval_with_jacobian(
        self,
        current: np_.ndarray | None = None,
        /,
    ) -> np_.ndarray:
        """
        """
        #current = current[:-1] if current is not None else self._z0.reshape(-1, 1, )
        current = current if current is not None else self._z0.reshape(-1, 1, )
        self._steady_array_updater(self._x, current, )
        f = self._func(self._x, self._t_zero, None, )
        j = self._jacobian_descriptor.eval(self._x, None, )
        #j = np_.hstack((j, np_.zeros((self.num_equations, 1), dtype=float)))
        j_done = True
        if self._iterations_printer:
            self._iterations_printer.next(current, f, j_done, )
        return f, j

    def reset(self, /, ) -> NoReturn:
        self._iterations_printer.reset() if self._iterations_printer else None

    def eval_jacobian(
        self,
        current: np_.ndarray | None = None,
        /,
    ) -> np_.ndarray:
        """
        """
        current = current if current is not None else self._z0.reshape(-1, 1)
        x = self._steady_array_updater(self._x, current)
        return self._jacobian_descriptor.eval(x, None, )

    def _create_incidence_matrix(self, /, ) -> NoReturn:
        """
        """
        matrix = np_.zeros((self.num_equations, self.num_quantities), dtype=bool)
        qids = list(qu_.generate_all_qids(self._quantities))
        qid_to_column = { qid: column for column, qid in enumerate(qids) }
        for row_index, eqn in enumerate(self._equations):
            column_indices = list(set(
                qid_to_column[tok.qid]
                for tok in eqn.incidence if tok.qid in qids
            ))
            matrix[row_index, column_indices] = True
        self.incidence_matrix = matrix
    #]


class PlainEvaluator(_EvaluatorMixin):
    """
    """
    #[
    __slots__ = (
        "_equations", "min_shift", "max_shift", "_func",
    )

    def __init__(
        self,
        equations: eq_.Equations,
        function_context: dir | None = None,
        /,
    ) -> NoReturn:
        self._equations = list(equations, )
        self._create_evaluator_function(function_context, )
        self._populate_min_max_shifts()

    @property
    def min_num_columns(self, /, ) -> int:
        return -self.min_shift + 1 + self.max_shift

    def eval(
        self,
        data_array: np_.ndarray,
        columns: int | Iterable[int],
        steady_array: np_.ndarray,
        /,
    ) -> np_.ndarray:
        """
        """
        return self._func(data_array, columns, steady_array, ).reshape(self.num_equations, -1)
    #]


class _IterationsPrinter:
    """
    Iterations printer for steady evaluator
    """
    #[
    _NAN_STRING = "•"
    _HEADER_DIVIDER_CHAR = "-"
    _MAX_LEN_EQUATION_STRING = 20
    #
    __slots__ = (
        "_equations", "_iter_count", "_prev_x", "_prev_f",
    )
    def __init__(
        self, 
        /,
        equations: eq_.Equations | None = None,
    ) -> NoReturn:
        self._equations = equations
        self._iter_count = 0
        self._prev_x = None
        self._prev_f = None

    def next(self, x, f, j_done, /, ) -> NoReturn:
        """
        Handle next iteration
        """
        f_norm = sp_.linalg.norm(f, 2)
        diff_x_norm = sp_.linalg.norm(self._prev_x - x, 2) if self._prev_x is not None else None
        if self._iter_count == 0:
            num_f = f.size
            num_x = x.size
            self.print_header(num_f, num_x, )
        self.print_iter(f_norm, diff_x_norm, *self.find_worst_equation(f, ), j_done, )
        self._prev_x = np_.copy(x)
        self._prev_f = np_.copy(f)
        self._iter_count += 1

    def find_worst_equation(self, f, /, ) -> tuple[Number, str]:
        """
        Find the largest function residual and the corresponding equation
        """
        index = np_.argmax(np_.abs(f))
        worst_f = np_.abs(f[index])
        worst_equation = self._equations[index].human if self._equations is not None else ""
        return worst_f, worst_equation

    def print_header(self, num_f, num_x, /, ) -> NoReturn:
        """
        Print header for iterations
        """
        dim_string = f"Dimension: {num_f}×{num_x}"
        header = f"{'iter':>5}   {'‖ƒ‖':>11}   {'‖∆x‖':>11}   {'∇ƒ':>5}   {'max|ƒ|':>11}   {''}"
        len_header = len(header) + self._MAX_LEN_EQUATION_STRING + 1
        header_divider = self._HEADER_DIVIDER_CHAR * len_header
        upper_divider = header_divider
        upper_divider = header_divider[0:2] + dim_string + header_divider[2 + len(dim_string):]
        lower_divider = header_divider
        print("", upper_divider, header, lower_divider, sep="\n")

    def print_iter(
        self,
        f_norm: Number,
        diff_x_norm: Number | None,
        worst_f: Number,
        worst_equation: str,
        j_done: bool,
        /,
    ) -> NoReturn:
        """
        Print info on current iteration
        """
        diff_x_norm_string = f"{diff_x_norm:.5e}" if diff_x_norm is not None else self._NAN_STRING
        j_done_string = "√" if j_done else "×"
        worst_equation = (
            worst_equation[:self._MAX_LEN_EQUATION_STRING] + "…"
            if len(worst_equation) > self._MAX_LEN_EQUATION_STRING
            else worst_equation
        )
        print(f"{self._iter_count:5g}   {f_norm:.5e}   {diff_x_norm_string:>11}   {j_done_string:>5}   {worst_f:.5e}   {worst_equation}")

    def reset(self, /, ) -> NoReturn:
        """
        Reset iterations printer
        """
        self._iter_count = 0
        self._prev_x = None
        self._prev_f = None
    #]

